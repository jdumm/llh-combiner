A project for merging independent 1D maximum likelihood analyses to find a joint maximum likelihood.  Also calculates Neyman (strict) or Feldman&Cousins(TODO) upper limits and sensitivities.

So far, there is a 'merge.py' script for merging simulated log-likelihood curves from >=1 independent analyses as well as a simple Neyman sensitivity script, 'sensitivity.py'.

Note that if running with ipython, the args can properly be passed to a script like merge.py by using an extra "--" after the script name, e.g.:
ipython merge.py -- results1.txt results2.txt test_data/merged_results.out --interp

So an example usage might be:
gunzip test_data/results_7yrICmuons_KRAg5e7.txt.gz
ipython merge.py -- test_data/results_7yrICmuons_KRAg5e7.txt test_data/MyFile.txt test_data/merged_7yrICmuons_KRAg5e7_MyFile.txt --interp
ipython sensitivity.py -- test_data/merged_7yrICmuons_KRAg5e7_MyFile.txt

The sensitivity for a single analysis can be obtained by only passing a single input file (no more 'dummy' file names). You could try this with existing data in the GitHub project just to see if everything works:
gunzip test_data/results_7yrICmuons_KRAg5e7.txt.gz
ipython merge.py -- test_data/results_7yrICmuons_KRAg5e7.txt test_data/merged_7yrICmuons_KRAg5e7.txt --interp
ipython sensitivity.py -- test_data/merged_7yrICmuons_KRAg5e7.txt

To look at a plot of how the merging is working for each trial, use the --diagnostic option (you may have to force quit the process if you don't want to go through them all):
ipython merge.py -- test_data/results_7yrICmuons_KRAg5e7.txt test_data/merged_7yrICmuons_KRAg5e7.txt --interp --diagnostic

Many files can be merged simultaneously by adding them as positional arguments:
ipython merge.py -- results1.txt results2.txt results3.txt test_data/3merged_results.out --interp

----get_sensitivity.py----
This script has been made to correct biases (or not) and get the sensitivity in one command line.

An example of usage might be:
ipython get_sensitivity.py -- test_data/results_7yrICmuons_KRAg5e7.txt --bias test_data/results_9yrANTshowers_KRAg5e7_23may.txt test_data/results_9yrANTmuons_KRAg5e7_23may.txt --interp --hide

This will correct the bias of both ANT files but not IC one. It is possible to correct all the files or none of them.
--hide option permits to not show the plots.
--diagnostic option is also available.


----ntrials.py----
If someone hands you a mysterious file, you can use the 'ntrials.py' utility script to determine the number of trials at each flux:
ipython ntrials.py -- test_data/results_7yrICmuons_KRAg5e7.txt

Example output:
Unique fluxes: [ 0.    0.25  0.5   0.75  1.    1.25  1.5   1.75  2.  ]
For flux = 0.00e+00, nTrials = 2000
For flux = 2.50e-01, nTrials = 2000
...
For flux = 1.75e+00, nTrials = 2000
For flux = 2.00e+00, nTrials = 2000

----shuffle.py----
The randomized ordering of the trials prior to merging should not matter, provided that there are the right number of trials at the right flux values.  This principle can be verified by shuffling the files and re-running the sensitivity calculation:

gunzip test_data/results_7yrICmuons_KRAg5e7.txt.gz
ipython shuffle.py -- test_data/results_7yrICmuons_KRAg5e7.txt test_data/results_7yrICmuons_KRAg5e7_shuffled.txt
ipython merge.py -- test_data/results_7yrICmuons_KRAg5e7_shuffled.txt test_data/merged_7yrICmuons_KRAg5e7_shuffled.txt --interp
ipython sensitivity.py -- test_data/merged_7yrICmuons_KRAg5e7_shuffled.txt

Note that shuffling any input file also groups all trials at the same flux level together in case they are disjoint.  This can be used to bring different files into a common format.

----bias.py----
A fit of the median fitted flux versus injected flux of the pseudo-experiments permits to measure bias.

To fit the bias (as f(x) = a * x), do:
ipython merge.py -- test_data/results_7yrICmuons_KRAg5e7.txt test_data/merged_7yrICmuons_KRAg5e7.txt --interp
ipython bias.py -- test_data/merged_7yrICmuons_KRAg5e7.txt

The bias can be corrected by giving the initial datafile to bias.py and the --bias option to merge.py. This will write the bias in the first line of the datafile (or rewrite it if already there) and merge.py will correct it for the merging.
For example, to correct a bias fitted in results_file1.txt, in results_file2.txt and no bias in results_file3.txt and get the sensitivity do:
ipython merge.py -- test_data/results_file1.txt test_data/merged_file1.txt --interp
ipython bias.py -- test_data/merged_file1.txt test_data/results_file1.txt
ipython merge.py -- test_data/results_file2.txt test_data/merged_file2.txt --interp
ipython bias.py -- test_data/merged_file2.txt test_data/results_file2.txt
ipython merge.py -- test_data/results_file1.txt test_data/results_file2.txt test_data/results_file3.txt test_data/merged_files.txt --interp --bias

The --bias option will correct all the files having the bias written in the first line, remove this line to not correct a particular file.

Or all of this can be done in one command line using the get_sensitivity.py script !
